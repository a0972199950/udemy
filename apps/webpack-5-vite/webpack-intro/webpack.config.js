const path = require('path')
const HtmkWebpackPlugin = require('html-webpack-plugin')
const MiniCssExtractPlugin = require('mini-css-extract-plugin')
const CssMinimizerWebpackPlugin = require('css-minimizer-webpack-plugin')

module.exports = {
  context: path.resolve(__dirname, 'src'),
  mode: 'production',
  // devtool: 'inline-source-map',
  entry: {
    main: './index.js'
  },
  output: {
    asyncChunks: true,
    iife: true,
    clean: true,
    filename: '[name].initial.js',
    chunkFilename: '[name].chunk.js',
    assetModuleFilename: 'assets/[name][ext]',
    path: path.resolve(__dirname, 'dist'),
  },
  optimization: {
    // 定義 chunk js file 的命名規則
    // [named]: 會用人類可讀懂得名稱
    // [natural]: 檔名採用遞增的整數
    // [deterministic]: 檔名 hash 計算後得出的特定整數，每次編譯的檔名結果都會相同，除非原始檔名有修改
    // [size]: 最小化 initial download size
    // [total-size]: 最小化 total download size
    chunkIds: 'named',
    
    splitChunks: {
      chunks: 'all'
    },

    minimizer: [
      // 繼承所有預設
      '...',
      
      // 最小化 css 檔案
      new CssMinimizerWebpackPlugin()
    ]
  },
  watchOptions: {
    ignored: ['**/node_modules'],
  },
  plugins: [
    // new webpack.ProvidePlugin({
    //   _: 'lodash',
    //   join: ['lodash', 'join']
    // }),
    new HtmkWebpackPlugin({
      filename: 'index.html',
      inject: 'body',
      title: 'generated by html webpack plugin',
      template: './template/entry.html',
      favicon: './assets/favicon.ico'
    }),
    new MiniCssExtractPlugin({
      filename: 'styles/[name].css',
      chunkFilename: 'styles/[name].chunk_css.css'
    })
  ],
  module: {
    // 也可以直接使用 type: 'asset' 讓 webpack 自動判斷使用哪個 loader
    rules: [
      {
        test: /\.(jpg|png)$/i,
        type: 'asset/resource', // file-loader, 將檔案打包到 dist 資料夾中並使用相對路徑連接檔案
      },
      {
        test: /\.txt$/i,
        type: 'asset/source' // raw-loader, 將檔案內容轉換成字串
      },
      {
        test: /\.svg$/i,
        type: 'asset/inline' // url-loader, 將檔案內容轉換成 base64 字串，適合用在小檔案。大型圖片檔案會出現尺寸過大警告
      },
      {
        test: /\.css$/i,
        exclude: /\.module\.css$/, // 排除 .module.css 文件
        // use 的套用順序是由後至前
        use: [
          // 這兩者擇一使用，並且都必須放在 css-loader 前面
          // style-loader 會把所有 CSS 插入到 style 標籤中
          // MiniCssExtractPlugin.loader 會將 CSS 提取成獨立的檔案，並用 <link> 標籤連接
          MiniCssExtractPlugin.loader,
          // 'style-loader',

          // 作用:
          // 1. 解析 CSS 中的 @import 和 url()
          // 2. 直接在 .js 中 import .css...
          'css-loader'
        ]
      },
      {
        test: /\.scss/i,
        use: [
          MiniCssExtractPlugin.loader,
          'css-loader',
          'sass-loader'
        ],
      },
    ]
  },
  devServer: {
    port: 3000,
    hot: true,
    watchFiles: ['**/src/**/*.php'],
    static: [
      {
        directory: path.resolve(__dirname, 'public'),
        watch: true,
        publicPath: '/',
      },
      {
        directory: path.resolve(__dirname, 'style'),
        watch: false,
        publicPath: '/style',
      }
    ]
  }
}